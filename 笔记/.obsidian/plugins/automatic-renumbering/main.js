/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AutoReordering
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// node_modules/async-mutex/index.mjs
var E_TIMEOUT = new Error("timeout while waiting for mutex to become available");
var E_ALREADY_LOCKED = new Error("mutex already locked");
var E_CANCELED = new Error("request for lock canceled");
var __awaiter$2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var Semaphore = class {
  constructor(_value, _cancelError = E_CANCELED) {
    this._value = _value;
    this._cancelError = _cancelError;
    this._queue = [];
    this._weightedWaiters = [];
  }
  acquire(weight = 1, priority = 0) {
    if (weight <= 0)
      throw new Error(`invalid weight ${weight}: must be positive`);
    return new Promise((resolve, reject) => {
      const task = { resolve, reject, weight, priority };
      const i = findIndexFromEnd(this._queue, (other) => priority <= other.priority);
      if (i === -1 && weight <= this._value) {
        this._dispatchItem(task);
      } else {
        this._queue.splice(i + 1, 0, task);
      }
    });
  }
  runExclusive(callback_1) {
    return __awaiter$2(this, arguments, void 0, function* (callback, weight = 1, priority = 0) {
      const [value, release] = yield this.acquire(weight, priority);
      try {
        return yield callback(value);
      } finally {
        release();
      }
    });
  }
  waitForUnlock(weight = 1, priority = 0) {
    if (weight <= 0)
      throw new Error(`invalid weight ${weight}: must be positive`);
    if (this._couldLockImmediately(weight, priority)) {
      return Promise.resolve();
    } else {
      return new Promise((resolve) => {
        if (!this._weightedWaiters[weight - 1])
          this._weightedWaiters[weight - 1] = [];
        insertSorted(this._weightedWaiters[weight - 1], { resolve, priority });
      });
    }
  }
  isLocked() {
    return this._value <= 0;
  }
  getValue() {
    return this._value;
  }
  setValue(value) {
    this._value = value;
    this._dispatchQueue();
  }
  release(weight = 1) {
    if (weight <= 0)
      throw new Error(`invalid weight ${weight}: must be positive`);
    this._value += weight;
    this._dispatchQueue();
  }
  cancel() {
    this._queue.forEach((entry) => entry.reject(this._cancelError));
    this._queue = [];
  }
  _dispatchQueue() {
    this._drainUnlockWaiters();
    while (this._queue.length > 0 && this._queue[0].weight <= this._value) {
      this._dispatchItem(this._queue.shift());
      this._drainUnlockWaiters();
    }
  }
  _dispatchItem(item) {
    const previousValue = this._value;
    this._value -= item.weight;
    item.resolve([previousValue, this._newReleaser(item.weight)]);
  }
  _newReleaser(weight) {
    let called = false;
    return () => {
      if (called)
        return;
      called = true;
      this.release(weight);
    };
  }
  _drainUnlockWaiters() {
    if (this._queue.length === 0) {
      for (let weight = this._value; weight > 0; weight--) {
        const waiters = this._weightedWaiters[weight - 1];
        if (!waiters)
          continue;
        waiters.forEach((waiter) => waiter.resolve());
        this._weightedWaiters[weight - 1] = [];
      }
    } else {
      const queuedPriority = this._queue[0].priority;
      for (let weight = this._value; weight > 0; weight--) {
        const waiters = this._weightedWaiters[weight - 1];
        if (!waiters)
          continue;
        const i = waiters.findIndex((waiter) => waiter.priority <= queuedPriority);
        (i === -1 ? waiters : waiters.splice(0, i)).forEach((waiter) => waiter.resolve());
      }
    }
  }
  _couldLockImmediately(weight, priority) {
    return (this._queue.length === 0 || this._queue[0].priority < priority) && weight <= this._value;
  }
};
function insertSorted(a, v) {
  const i = findIndexFromEnd(a, (other) => v.priority <= other.priority);
  a.splice(i + 1, 0, v);
}
function findIndexFromEnd(a, predicate) {
  for (let i = a.length - 1; i >= 0; i--) {
    if (predicate(a[i])) {
      return i;
    }
  }
  return -1;
}
var __awaiter$1 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var Mutex = class {
  constructor(cancelError) {
    this._semaphore = new Semaphore(1, cancelError);
  }
  acquire() {
    return __awaiter$1(this, arguments, void 0, function* (priority = 0) {
      const [, releaser] = yield this._semaphore.acquire(1, priority);
      return releaser;
    });
  }
  runExclusive(callback, priority = 0) {
    return this._semaphore.runExclusive(() => callback(), 1, priority);
  }
  isLocked() {
    return this._semaphore.isLocked();
  }
  waitForUnlock(priority = 0) {
    return this._semaphore.waitForUnlock(1, priority);
  }
  release() {
    if (this._semaphore.isLocked())
      this._semaphore.release();
  }
  cancel() {
    return this._semaphore.cancel();
  }
};

// src/SettingsManager.ts
var DEFAULT_SETTINGS = {
  liveNumberingUpdate: true,
  smartPasting: true,
  startsFromOne: true,
  indentSize: 4,
  liveCheckboxUpdate: true,
  sortCheckboxesToBottom: true
};
var SettingsManager = class {
  constructor() {
    this.settings = DEFAULT_SETTINGS;
  }
  static getInstance() {
    if (!SettingsManager.instance) {
      SettingsManager.instance = new SettingsManager();
    }
    return SettingsManager.instance;
  }
  getSettings() {
    return this.settings;
  }
  setSettings(settings) {
    this.settings = settings;
  }
  getLiveNumberingUpdate() {
    return this.settings.liveNumberingUpdate;
  }
  setLiveNumberingUpdate(value) {
    this.settings.liveNumberingUpdate = value;
  }
  getSmartPasting() {
    return this.settings.smartPasting;
  }
  setSmartPasting(value) {
    this.settings.smartPasting = value;
  }
  getStartsFromOne() {
    return this.settings.startsFromOne;
  }
  setStartsFromOne(value) {
    this.settings.startsFromOne = value;
  }
  getIndentSize() {
    return this.settings.indentSize;
  }
  setIndentSize(value) {
    this.settings.indentSize = value;
  }
  getLiveCheckboxUpdate() {
    return this.settings.liveCheckboxUpdate;
  }
  setLiveCheckboxUpdate(value) {
    this.settings.liveCheckboxUpdate = value;
  }
  getSortCheckboxesBottom() {
    return this.settings.sortCheckboxesToBottom;
  }
  setSortCheckboxesBottom(value) {
    this.settings.sortCheckboxesToBottom = value;
  }
};

// src/utils.ts
function getLineInfo(line) {
  const length = line.length;
  let index = 0;
  let numOfSpaceIndents = 0;
  const indentSize = SettingsManager.getInstance().getIndentSize();
  while (index < length && (line[index] === " " || line[index] === "	")) {
    numOfSpaceIndents += line[index] === " " ? 1 : indentSize;
    index++;
  }
  const spaceCharsNum = index;
  while (index < length && "0".charCodeAt(0) <= line.charCodeAt(index) && line.charCodeAt(index) <= "9".charCodeAt(0)) {
    index++;
  }
  const isNumberDetected = spaceCharsNum !== index && line[index] === "." && line[index + 1] === " ";
  if (!isNumberDetected) {
    const isChecked2 = getCheckboxInfo(line, index, isNumberDetected);
    return {
      spaceCharsNum,
      spaceIndent: numOfSpaceIndents,
      number: void 0,
      textIndex: index,
      isChecked: isChecked2
    };
  }
  const number = parseInt(line.slice(spaceCharsNum, index));
  index += 2;
  const isChecked = getCheckboxInfo(line, index, isNumberDetected);
  if (isNaN(number)) {
    return {
      spaceCharsNum,
      spaceIndent: numOfSpaceIndents,
      number: void 0,
      textIndex: 0,
      isChecked
    };
  }
  return {
    spaceCharsNum,
    spaceIndent: numOfSpaceIndents,
    number,
    textIndex: index,
    isChecked
  };
}
function getCheckboxInfo(line, index, isNumberDetected) {
  const EMPTY_CHECKBOX_NUMBERED = /^\s*\[ \] /;
  const FULL_CHECKBOX_NUMBERED = /^\s*\[.\] /;
  const EMPTY_CHECKBOX = /^\s*- \[ \] /;
  const FULL_CHECKBOX = /^\s*- \[.\] /;
  if (isNumberDetected) {
    const s = line.slice(index);
    if (EMPTY_CHECKBOX_NUMBERED.test(s)) {
      return false;
    }
    if (FULL_CHECKBOX_NUMBERED.test(s)) {
      return true;
    }
  } else {
    if (EMPTY_CHECKBOX.test(line)) {
      return false;
    }
    if (FULL_CHECKBOX.test(line)) {
      return true;
    }
  }
  return void 0;
}
function getListStart(editor, currLineIndex) {
  if (currLineIndex < 0 || editor.lastLine() < currLineIndex) {
    return void 0;
  }
  const currInfo = getLineInfo(editor.getLine(currLineIndex));
  if (currInfo.number === void 0) {
    return currLineIndex;
  }
  let prevIndex = currLineIndex - 1;
  while (0 <= prevIndex && getLineInfo(editor.getLine(prevIndex)).number !== void 0) {
    prevIndex--;
  }
  return prevIndex + 1;
}
function getLastListStart(lines) {
  const maxIndex = lines.length - 1;
  let index = void 0;
  for (let i = maxIndex; i >= 0; i--) {
    const info = getLineInfo(lines[i]);
    if (info.number === void 0) {
      break;
    }
    index = i;
  }
  return index;
}
function getPrevItemIndex(editor, index) {
  if (index <= 0 || editor.lastLine() < index) {
    return void 0;
  }
  const currSpaceOffset = getLineInfo(editor.getLine(index)).spaceIndent;
  for (let prevIndex = index - 1; prevIndex >= 0; prevIndex--) {
    const info = getLineInfo(editor.getLine(prevIndex));
    if (info.spaceIndent > currSpaceOffset) {
      continue;
    }
    if (info.spaceIndent === currSpaceOffset && info.number !== void 0) {
      return prevIndex;
    }
    return void 0;
  }
  return void 0;
}

// src/pasteAndDropHandler.ts
function handlePasteAndDrop(evt, editor, mutex2) {
  var _a, _b;
  if (!this.settingsManager.getLiveNumberingUpdate()) {
    return;
  }
  const content = evt instanceof ClipboardEvent ? (_a = evt.clipboardData) == null ? void 0 : _a.getData("text") : evt instanceof DragEvent ? (_b = evt.dataTransfer) == null ? void 0 : _b.getData("text") : null;
  if (evt.defaultPrevented || !content) {
    return;
  }
  evt.preventDefault();
  mutex2.runExclusive(() => {
    this.blockChanges = true;
    const { baseIndex, offset } = processTextInput(editor, content);
    this.renumberer.renumberAllListsInRange(editor, baseIndex, baseIndex + offset);
  });
}
function processTextInput(editor, textFromClipboard) {
  var _a;
  const { anchor, head } = editor.listSelections()[0];
  const baseIndex = Math.min(anchor.line, head.line);
  let numOfLines;
  const smartPasting = SettingsManager.getInstance().getSmartPasting();
  if (smartPasting) {
    const afterPastingIndex = Math.max(anchor.line, head.line) + 1;
    const line = editor.getLine(afterPastingIndex);
    const info = getLineInfo(line);
    if (info.number !== void 0) {
      const retval = modifyText(textFromClipboard, info.number);
      textFromClipboard = (_a = retval.modifiedText) != null ? _a : textFromClipboard;
      numOfLines = retval.numOfLines;
    } else {
      numOfLines = countNewlines(textFromClipboard);
    }
  } else {
    numOfLines = countNewlines(textFromClipboard);
  }
  editor.replaceSelection(textFromClipboard);
  return { baseIndex, offset: numOfLines };
}
function countNewlines(text) {
  let count = 0;
  for (const char of text) {
    if (char === "\n") {
      count++;
    }
  }
  return count;
}
function modifyText(text, newNumber) {
  const lines = text.split("\n");
  const lineIndex = getLastListStart(lines);
  if (lineIndex === void 0) {
    return { modifiedText: void 0, numOfLines: lines.length };
  }
  const targetLine = lines[lineIndex];
  const info = getLineInfo(targetLine);
  const newLine = targetLine.slice(0, info.spaceCharsNum) + newNumber + ". " + targetLine.slice(info.textIndex);
  lines[lineIndex] = newLine;
  const modifiedText = lines.join("\n");
  return { modifiedText, numOfLines: lines.length };
}

// src/command-registration.ts
function registerCommands(plugin) {
  plugin.addCommand({
    id: "1-selection",
    name: "Renumber selected lists or at cursor position",
    editorCallback: (editor) => {
      const { anchor, head } = editor.listSelections()[0];
      const startLine = Math.min(anchor.line, head.line);
      const endLine = Math.max(anchor.line, head.line) + 1;
      plugin.getRenumberer().renumber(editor, startLine, endLine);
    }
  });
  plugin.addCommand({
    id: "2-entire-note",
    name: "Renumber all numbered lists in note",
    editorCallback: (editor) => {
      plugin.getRenumberer().renumber(editor, 0, editor.lastLine() + 1);
    }
  });
}

// src/Renumberer.ts
var Renumberer = class {
  constructor() {
    // renumbers all numbered lists in specified range
    this.renumberAllListsInRange = (editor, start, limit) => {
      const isInvalidRange = start < 0 || editor.lastLine() + 1 < limit || limit < start;
      const newChanges = [];
      let i = start;
      if (isInvalidRange) {
        console.debug(
          `renumbering range is invalid with index=${start}, limit=${limit}. editor.lastLine()=${editor.lastLine()}`
        );
        return { changes: newChanges, endIndex: i };
      }
      for (; i < limit; i++) {
        const line = editor.getLine(i);
        if (line === void 0) {
          continue;
        }
        const { number } = getLineInfo(line);
        if (number === void 0) {
          continue;
        }
        const startIndex = getListStart(editor, i);
        if (startIndex !== void 0) {
          const pendingChanges = this.renumberAtIndex(editor, startIndex, false);
          if (pendingChanges) {
            newChanges.push(...pendingChanges.changes);
            i = pendingChanges.endIndex;
          }
        }
      }
      return { changes: newChanges, endIndex: i };
    };
  }
  renumber(editor, start, limit) {
    let pendingChanges;
    if (limit !== void 0) {
      pendingChanges = this.renumberAllListsInRange(editor, start, limit);
    } else {
      pendingChanges = this.renumberAtIndex(editor, start);
    }
    this.applyChangesToEditor(editor, pendingChanges.changes);
    return pendingChanges.endIndex;
  }
  // bfs where indents == junctions
  renumberAtIndex(editor, index, isLocal = true) {
    const changes = [];
    const queue = [index];
    let endIndex = index;
    if (index > 0) {
      queue.unshift(index - 1);
    }
    if (index < editor.lastLine()) {
      queue.push(index + 1);
    }
    const visited = [];
    const firstSpaceIndent = getLineInfo(editor.getLine(queue[0])).spaceIndent;
    visited[firstSpaceIndent] = queue[0];
    while (0 < queue.length) {
      const indexToRenumber = queue.shift();
      if (indexToRenumber > editor.lastLine()) {
        break;
      }
      const info = getLineInfo(editor.getLine(indexToRenumber));
      if (indexToRenumber < visited[info.spaceIndent]) {
        continue;
      }
      if (info.number === void 0) {
        continue;
      }
      const prevIndex = getPrevItemIndex(editor, indexToRenumber);
      const isStartFromOne = SettingsManager.getInstance().getStartsFromOne();
      let num;
      if (prevIndex === void 0) {
        num = isStartFromOne ? 1 : info.number;
      } else {
        num = getLineInfo(editor.getLine(prevIndex)).number + 1;
      }
      const changeResult = this.generateChanges(editor, indexToRenumber, num, info.spaceIndent, isLocal);
      changes.push(...changeResult.changes);
      queue.push(...changeResult.revisitIndices);
      visited[info.spaceIndent] = changeResult.endIndex;
      endIndex = Math.max(endIndex, changeResult.endIndex);
    }
    return { changes, endIndex };
  }
  // performs the calculation itself
  generateChanges(editor, firstIndex, currentNumber, firstIndent, isLocal = true) {
    const revisitIndices = [];
    const changes = [];
    let firstMatchInSuccession = true;
    if (firstIndex < 0) {
      return { changes, revisitIndices, endIndex: firstIndex };
    }
    let currentIndex = firstIndex;
    let indexToRevisit = true;
    for (; currentIndex <= editor.lastLine(); currentIndex++) {
      const lineText = editor.getLine(currentIndex);
      const info = getLineInfo(lineText);
      if (info.spaceIndent > firstIndent) {
        if (indexToRevisit) {
          revisitIndices.push(currentIndex);
          indexToRevisit = false;
        }
        continue;
      }
      if (info.spaceIndent < firstIndent) {
        revisitIndices.push(currentIndex);
        break;
      }
      indexToRevisit = true;
      if (info.number === void 0) {
        break;
      }
      if (info.number === currentNumber) {
        if (isLocal && firstMatchInSuccession === false) {
          currentIndex += 1;
          break;
        }
        firstMatchInSuccession = false;
        currentNumber++;
        continue;
      }
      firstMatchInSuccession = true;
      const updatedLine = this.getUpdatedLine(currentIndex, currentNumber, info, lineText);
      changes.push(updatedLine);
      currentNumber++;
    }
    return { changes, revisitIndices, endIndex: currentIndex };
  }
  getUpdatedLine(index, expectedNum, info, text) {
    const newText = `${text.slice(0, info.spaceCharsNum)}${expectedNum}. ${text.slice(info.textIndex)}`;
    const updatedLine = {
      from: { line: index, ch: 0 },
      to: { line: index, ch: text.length },
      text: newText
    };
    return updatedLine;
  }
  applyChangesToEditor(editor, changes) {
    if (changes.length > 0) {
      editor.transaction({ changes });
    }
  }
};

// src/settings-tab.ts
var import_obsidian = require("obsidian");
var AutoRenumberingSettings = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
    this.settingsManager = SettingsManager.getInstance();
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Tab size").setDesc(
      "Set the indent size to the same size as in the editor's settings. Can be found under: Options > Editor > Tab indent size/Indent visual width."
    ).addSlider((slider) => {
      slider.setValue(this.settingsManager.getIndentSize()).setLimits(2, 8, 1).setDynamicTooltip().onChange(async (value) => {
        this.settingsManager.setIndentSize(value);
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setHeading().setName("Numbered lists");
    new import_obsidian.Setting(containerEl).setName("Automatically update numbered lists").setDesc("Update numbered lists as changes are made.").addToggle(
      (toggle) => toggle.setValue(this.settingsManager.getLiveNumberingUpdate()).onChange(async (value) => {
        this.settingsManager.setLiveNumberingUpdate(value);
        await this.plugin.saveSettings();
        if (value) {
          smartPastingToggleEl.classList.add("smart-paste-toggle");
          smartPastingToggleEl.classList.remove("smart-paste-toggle-disabled");
        } else {
          smartPastingToggleEl.classList.remove("smart-paste-toggle");
          smartPastingToggleEl.classList.add("smart-paste-toggle-disabled");
        }
      })
    );
    const smartPastingSetting = new import_obsidian.Setting(containerEl).setName("Smart pasting").setDesc("Pasting keeps the sequencing consistent with the original numbered list.").addToggle(
      (toggle) => toggle.setValue(this.settingsManager.getSmartPasting()).onChange(async (value) => {
        this.settingsManager.setSmartPasting(value);
        await this.plugin.saveSettings();
      })
    );
    const smartPastingToggleEl = smartPastingSetting.settingEl;
    const isLiveNumberingUpdateEnabled = this.settingsManager.getLiveNumberingUpdate();
    if (isLiveNumberingUpdateEnabled) {
      smartPastingToggleEl.classList.add("smart-paste-toggle");
      smartPastingToggleEl.classList.remove("smart-paste-toggle-disabled");
    } else {
      smartPastingToggleEl.classList.add("smart-paste-toggle-disabled");
      smartPastingToggleEl.classList.remove("smart-paste-toggle");
    }
    new import_obsidian.Setting(containerEl).setName("Start numbering from 1").setDesc("Ensure that the first item of every numbered list is set to 1.").addToggle(
      (toggle) => toggle.setValue(this.settingsManager.getStartsFromOne()).onChange(async (value) => {
        this.settingsManager.setStartsFromOne(value);
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setHeading().setName("Checklists");
    new import_obsidian.Setting(containerEl).setName("Automatically sort checklists").setDesc("Sort checklist items when boxes are checked").addToggle(
      (toggle) => toggle.setValue(this.settingsManager.getLiveCheckboxUpdate()).onChange(async (value) => {
        this.settingsManager.setLiveCheckboxUpdate(value);
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/checkbox.ts
function reorderCheckboxes(editor, index) {
  const info = getLineInfo(editor.getLine(index));
  if (info.isChecked === void 0) {
    return;
  }
  let toLine = info.isChecked === true ? getNewCheckedLoc(editor, index) : getNewUncheckedLoc(editor, index);
  if (toLine === void 0 || index === toLine) {
    return;
  }
  moveLine(editor, index, toLine);
  return { start: Math.min(index, toLine), limit: Math.max(index, toLine) };
}
function getNewUncheckedLoc(editor, startIndex) {
  if (startIndex < 0 || editor.lastLine() < startIndex) {
    return void 0;
  }
  const startInfo = getLineInfo(editor.getLine(startIndex));
  if (startInfo.isChecked !== false) {
    return void 0;
  }
  const startContainsNumber = startInfo.number !== void 0;
  function shouldBreak(currentInfo) {
    const currentContainsNumber = currentInfo.number !== void 0;
    const hasSameNumberStatus = currentContainsNumber === startContainsNumber;
    const hasSameIndentation = currentInfo.spaceIndent === startInfo.spaceIndent;
    if (!hasSameNumberStatus || !hasSameIndentation) {
      return true;
    }
    return currentInfo.isChecked === false || currentInfo.isChecked === void 0;
  }
  let index = startIndex - 1;
  while (0 <= index) {
    const currentInfo = getLineInfo(editor.getLine(index));
    if (shouldBreak(currentInfo)) {
      break;
    }
    index--;
  }
  return index + 1;
}
function getNewCheckedLoc(editor, startIndex) {
  if (startIndex < 0 || editor.lastLine() < startIndex) {
    return void 0;
  }
  const startInfo = getLineInfo(editor.getLine(startIndex));
  if (startInfo.isChecked !== true) {
    return void 0;
  }
  function shouldBreak(currentInfo) {
    const currentContainsNumber = currentInfo.number !== void 0;
    const hasSameNumberStatus = currentContainsNumber === startContainsNumber;
    const hasSameIndentation = currentInfo.spaceIndent === startInfo.spaceIndent;
    if (!hasSameNumberStatus || !hasSameIndentation) {
      return true;
    }
    return currentInfo.isChecked === true || currentInfo.isChecked === void 0;
  }
  const startContainsNumber = startInfo.number !== void 0;
  let index = startIndex + 1;
  while (index <= editor.lastLine()) {
    const currentInfo = getLineInfo(editor.getLine(index));
    if (shouldBreak(currentInfo)) {
      break;
    }
    index++;
  }
  return index - 1;
}
function moveLine(editor, fromLine, toLine) {
  if (fromLine === toLine) {
    return;
  }
  const changes = [];
  const content = editor.getLine(fromLine);
  const lastLine = editor.lastLine();
  let removeLine;
  let insertLine;
  if (fromLine === lastLine) {
    removeLine = {
      from: { line: fromLine - 1, ch: editor.getLine(fromLine - 1).length },
      to: { line: fromLine + 1, ch: content.length },
      text: ""
    };
    insertLine = {
      from: { line: toLine, ch: 0 },
      to: { line: toLine, ch: 0 },
      text: content + "\n"
    };
  } else if (toLine === lastLine) {
    removeLine = {
      from: { line: fromLine, ch: 0 },
      to: { line: fromLine + 1, ch: 0 },
      text: ""
    };
    insertLine = {
      from: { line: toLine + 1, ch: 0 },
      to: { line: toLine + 1, ch: 0 },
      text: "\n" + content
    };
  } else {
    removeLine = {
      from: { line: fromLine, ch: 0 },
      to: { line: fromLine + 1, ch: 0 },
      text: ""
    };
    const adjustedLine = toLine > fromLine ? toLine + 1 : toLine;
    insertLine = {
      from: { line: adjustedLine, ch: 0 },
      to: { line: adjustedLine, ch: 0 },
      text: content + "\n"
    };
  }
  changes.push(insertLine, removeLine);
  editor.transaction({ changes });
}

// main.ts
var mutex = new Mutex();
var AutoReordering = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.blockChanges = false;
    this.checkboxClickedAt = void 0;
  }
  async onload() {
    await this.loadSettings();
    registerCommands(this);
    this.addSettingTab(new AutoRenumberingSettings(this.app, this));
    this.settingsManager = SettingsManager.getInstance();
    this.renumberer = new Renumberer();
    this.registerEvent(
      this.app.workspace.on("editor-change", (editor) => {
        if (this.settingsManager.getLiveNumberingUpdate() === false) {
          return;
        }
        setTimeout(() => {
          mutex.runExclusive(() => {
            const originalPos = editor.getCursor();
            if (this.blockChanges) {
              return;
            }
            this.blockChanges = true;
            let currIndex;
            if (this.checkboxClickedAt !== void 0) {
              currIndex = this.checkboxClickedAt;
            } else {
              const { anchor, head } = editor.listSelections()[0];
              currIndex = Math.min(anchor.line, head.line);
            }
            let range;
            if (this.settingsManager.getLiveCheckboxUpdate() === true) {
              range = reorderCheckboxes(editor, currIndex);
            }
            if (this.settingsManager.getLiveNumberingUpdate() === true) {
              if (range !== void 0) {
                this.renumberer.renumber(editor, range.start, range.limit);
              } else {
                this.renumberer.renumber(editor, currIndex);
              }
            }
            if (!editor.somethingSelected()) {
              const newLineInOriginalPos = editor.getLine(originalPos.line);
              const newPos = {
                line: originalPos.line,
                ch: Math.min(originalPos.ch, newLineInOriginalPos.length)
              };
              editor.setCursor(newPos);
            }
          });
        }, 0);
      })
    );
    this.registerEvent(
      this.app.workspace.on("editor-paste", (evt, editor) => {
        handlePasteAndDrop.call(this, evt, editor, mutex);
      })
    );
    this.registerEvent(
      this.app.workspace.on("editor-drop", (evt, editor) => {
        handlePasteAndDrop.call(this, evt, editor, mutex);
      })
    );
    this.handleKeystrokeBound = this.handleKeystroke.bind(this);
    window.addEventListener("keydown", this.handleKeystrokeBound);
    this.handleMouseBound = this.handleMouseClick.bind(this);
    window.addEventListener("click", this.handleMouseBound);
  }
  handleKeystroke(event) {
    mutex.runExclusive(() => {
      this.blockChanges = event.ctrlKey || event.metaKey || event.altKey;
    });
  }
  handleMouseClick(event) {
    mutex.runExclusive(() => {
      const target = event.target;
      if (target.classList.contains("task-list-item-checkbox")) {
        const listLine = target.closest(".cm-line");
        if (listLine) {
          const editor = listLine.closest(".cm-editor");
          if (editor) {
            const allLines = Array.from(editor.getElementsByClassName("cm-line"));
            this.checkboxClickedAt = allLines.indexOf(listLine);
          }
        }
      }
      this.blockChanges = false;
    });
  }
  async onunload() {
    window.removeEventListener("keydown", this.handleKeystrokeBound);
    window.removeEventListener("mouse", this.handleMouseBound);
  }
  async loadSettings() {
    const settingsManager = SettingsManager.getInstance();
    settingsManager.setSettings(Object.assign({}, DEFAULT_SETTINGS, await this.loadData()));
  }
  async saveSettings() {
    const settingsManager = SettingsManager.getInstance();
    await this.saveData(settingsManager.getSettings());
  }
  getRenumberer() {
    return this.renumberer;
  }
};


/* nosourcemap */